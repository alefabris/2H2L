name: Post Owner Availability Poll

on:
  schedule:
    - cron: '0 8 * * *'  # 09:00 CET (08:00 UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  post_poll:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq and curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Check if today is 5 days before the next event
        id: check_event_day
        run: |
          NEXT_EVENT_DATE=$(jq -r '.date' events/upcoming.json)
          NEXT_DATE_EPOCH=$(date -d "$NEXT_EVENT_DATE" +%s)
          TODAY_EPOCH=$(date -u +%s)
          DIFF=$(( (NEXT_DATE_EPOCH - TODAY_EPOCH) / 86400 ))

          echo "ðŸ“… Days until next event: $DIFF"

          if [ "$DIFF" -ne 5 ]; then
            echo "ðŸ›‘ Not 5 days before next event. Skipping."
            echo "continue=false" >> $GITHUB_OUTPUT
          else
            echo "âœ… Today is 5 days before. Proceeding."
            echo "continue=true" >> $GITHUB_OUTPUT
          fi

      - name: Exit if not time to post
        if: steps.check_event_day.outputs.continue != 'true'
        run: exit 0

      - name: Delete previous messages from channel
        env:
          TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          CHANNEL_ID: ${{ secrets.DISCORD_OWNERS_CHANNEL_ID }}
        run: |
          MESSAGES=$(curl -s -H "Authorization: Bot $TOKEN" \
            "https://discord.com/api/v10/channels/$CHANNEL_ID/messages?limit=100")

          echo "$MESSAGES" | jq -r '.[].id' | while read -r ID; do
            echo "Deleting message $ID"
            curl -s -X DELETE "https://discord.com/api/v10/channels/$CHANNEL_ID/messages/$ID" \
              -H "Authorization: Bot $TOKEN" > /dev/null
            sleep 0.5
          done

      - name: Build and post availability poll
        run: |
          mkdir -p .tmp
          jq -r '.[]' games/owners.json > .tmp/owners_list.txt

          echo "ðŸ§© **Game Owners â€“ Will you be there next time?**\n\nReact with your emoji to confirm:\n" > owner_poll_message.txt

          EMOJIS=(ðŸ‡¦ ðŸ‡§ ðŸ‡¨ ðŸ‡© ðŸ‡ª ðŸ‡« ðŸ‡¬ ðŸ‡­ ðŸ‡® ðŸ‡¯ ðŸ‡° ðŸ‡± ðŸ‡² ðŸ‡³ ðŸ‡´ ðŸ‡µ ðŸ‡¶ ðŸ‡· ðŸ‡¸ ðŸ‡¹ ðŸ‡º ðŸ‡» ðŸ‡¼ ðŸ‡½ ðŸ‡¾ ðŸ‡¿)
          > .used_owner_emojis.txt

          i=0
          while read -r OWNER; do
            EMOJI="${EMOJIS[i]}"
            echo "${EMOJI} ${OWNER}\n" >> owner_poll_message.txt
            echo "${EMOJI} ${OWNER}" >> .used_owner_emojis.txt
            i=$((i + 1))
          done < .tmp/owners_list.txt

          MSG_CONTENT=$(jq -Rs . < owner_poll_message.txt | sed 's/\\\\n/\\n/g')

          RESPONSE=$(curl -s -X POST "https://discord.com/api/v10/channels/${{ secrets.DISCORD_OWNERS_CHANNEL_ID }}/messages" \
            -H "Authorization: Bot ${{ secrets.DISCORD_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"content\": $MSG_CONTENT}")

          echo "$RESPONSE" > .owner_poll_response.json
          MESSAGE_ID=$(jq -r '.id' .owner_poll_response.json)

          while read -r LINE; do
            EMOJI=$(cut -d' ' -f1 <<< "$LINE")
            ENCODED=$(printf "%s" "$EMOJI" | jq -sRr @uri)
            curl -s -X PUT "https://discord.com/api/v10/channels/${{ secrets.DISCORD_OWNERS_CHANNEL_ID }}/messages/${MESSAGE_ID}/reactions/${ENCODED}/@me" \
              -H "Authorization: Bot ${{ secrets.DISCORD_BOT_TOKEN }}" > /dev/null
            sleep 0.2
          done < .used_owner_emojis.txt

      - name: Commit emoji map
        run: |
          git config --global user.name "poll-bot"
          git config --global user.email "bot@example.com"
          git add .used_owner_emojis.txt
          git commit -m "Posted new owner poll with emoji map"
          git push || echo "Nothing to push"
